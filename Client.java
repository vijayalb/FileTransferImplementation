import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.PrintStream;import java.net.Socket;import java.util.logging.Level;import java.util.logging.Logger;public class Client {private static Socket sock; private static BufferedReader stdin;private static PrintStream outputStream;static String ip = "127.0.0.1";static ThreadGroup groupA;private static boolean USERSET = false;private static String USERNAME ="";private static BufferedReader inputStream;public static void connectToData(String a,String b) throws IOException{	try {        sock = new Socket(a,Integer.parseInt(b));        outputStream = new PrintStream(sock.getOutputStream());        inputStream = new BufferedReader(new InputStreamReader(sock.getInputStream()));        System.out.println("Connection successfull for new PORT");    } catch (Exception e) {        System.err.println("Cannot connect to the server with new PORT, try again later.");        System.exit(1);    }}public static void main(String[] args) throws IOException {try {    sock = new Socket(ip, 4446);    stdin = new BufferedReader(new InputStreamReader(System.in));	groupA = new ThreadGroup("GroupA"); } catch (Exception e) {    System.err.println("Cannot connect to the server, try again later.");    System.exit(1);}outputStream = new PrintStream(sock.getOutputStream());inputStream = new BufferedReader(new InputStreamReader(sock.getInputStream()));int flag=0;while(flag!=1){	String userAction=selectAction();	String[] split = userAction.split(" ");	String command=split[0];	try {     	if(USERSET){		switch (command) {			    				case "MODE":					String operation=split[1];		    	    System.out.println("Changing mode to "+operation);						            					break;		   				case "TYPE":					String operation2=split[1];					System.out.println("Type set to "+operation2);					break;						case "PUT":					int numOfFiles = split.length;					for (int i = 1; i < numOfFiles; i++) {						String[] oneAray = {split[0],split[i]};						Thread t = new Thread(groupA,new ClientToServerConnection(oneAray));				        t.start();					}			        break;			    			    case "GET":			    	Thread t1 = new Thread(new ClientToServerConnection(split));			        t1.start();			        break;			    			    case "PORT":			    	String operation5=split[1];			    	outputStream.println(command);			    	outputStream.println(operation5);			    	connectToData(ip,operation5);			    	break;			    			    case "LS":			    	outputStream.println(command);			    	int count = Integer.parseInt(inputStream.readLine());			    	System.out.println("List of Files are");			    	for(int i = 0; i < count; i++){			    		System.out.println(inputStream.readLine());			    	}			    				    	break;			   			    case "USER":			    	String operation6=split[1];		        	outputStream.println(command);		        	outputStream.println(operation6);		        	USERSET = true;		        	if(inputStream.readLine().equals("false")){		        		System.out.println("Invalid user");		        	}		        				        	else{		        		USERSET = true;		        		USERNAME = operation6;		        	}        				            break;			    					case "QUIT":				   	 sock.close();				     break;				     				case "NOOP":		        	outputStream.println(command);		        	System.out.println(inputStream.readLine());		        					case "STATUS":					System.out.println("\n Status");					Thread tga[] = new Thread[groupA.activeCount()]; 					groupA.enumerate(tga); // get threads in group					System.out.println("length is :" + tga.length);					System.out.println("Thread ID /t Thread Status"); // suspend each thread 					for(int i = 0; i < tga.length; i++) {					Thread temp = (Thread)tga[i];					System.out.println(temp.getId() +"/t"+ temp.getState()); // suspend each thread 					} 									case "STOP":					System.out.println("\n Stopping thread with ID "+ split[1]);					Thread tga1[] = new Thread[groupA.activeCount()]; 					groupA.enumerate(tga1);					for(int j = 0; j < tga1.length; j++) {						Thread temp1 = (Thread)tga1[j];						if(Long.toString(temp1.getId()).equals(split[1])){ // suspend each thread							System.out.println("ID IS : " + temp1.getId());							temp1.stop();							temp1.interrupt();							break;						}					} 		}	}	else{				switch (command) {                case "USER":        	String operation7=split[1];        	outputStream.println(command);        	outputStream.println(operation7);        	USERSET = true;        	if(inputStream.readLine().equals("false")){        		System.out.println("Invalid user");        		USERSET = false;        	}        	else{        		USERSET = true;        		USERNAME = operation7;        	}        		            break;                   case "QUIT":    	   	 sock.close();    	     break;       		}	} } catch (Exception e) {     System.err.println(e); }} sock.close();    } public static String selectAction() throws IOException {  	 if (USERSET) 			System.out.println("\n\nSelection Commands Available: \n 1.USER [username] \n 2.MODE [Stream, block, compressed] \n 3.TYPE [EBCDIC, ASCII] \n 4.PUT [filename] \n 5.GET [filename] \n 6.PORT [port number] \n 7.LS \n 8.QUIT \nChoose [command]:");			else{System.out.print("\n\nSelection Commands Available: \n 1.USER [username] \n 2.QUIT \nChoose:");		}  return stdin.readLine(); }     public static void sendFile(String fileName) { try {    File myFile = new File(fileName);    byte[] mybytearray = new byte[(int) myFile.length()];    FileInputStream fileInputStream = new FileInputStream(myFile);    BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);    System.out.println("2");    DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);    dataInputStream.readFully(mybytearray, 0, mybytearray.length);    OutputStream outputStream = sock.getOutputStream();    System.out.println("3");    DataOutputStream dataOutputStream = new DataOutputStream(outputStream);    dataOutputStream.writeUTF(myFile.getName());    dataOutputStream.writeLong(mybytearray.length);    dataOutputStream.write(mybytearray, 0, mybytearray.length);    System.out.println("4");    System.out.println("5");    System.out.println("File "+fileName+" sent to Server.");     } catch (Exception e) {        System.err.println("File does not exist!"+e);} }      public static void receiveFile(String fileName) {   try {    int bytesRead;    InputStream inputStream = sock.getInputStream();    DataInputStream clientData = new DataInputStream(inputStream);    fileName = clientData.readUTF();    OutputStream outputStream = new FileOutputStream(("received_from_server_" + fileName));    long size = clientData.readLong();    byte[] buffer = new byte[1024];    while (size > 0 && (bytesRead = clientData.read(buffer, 0, (int)                     Math.min(buffer.length, size))) != -1) {        outputStream.write(buffer, 0, bytesRead);        size -= bytesRead;    }    System.out.println("File "+fileName+" received from Server.");} catch (IOException ex) {    Logger.getLogger(ServerToClientConnection.class.getName()).log(Level.SEVERE, null, ex);}  }    }